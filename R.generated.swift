//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var infoPlist: infoPlist { .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale)) }
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func infoPlist(preferredLanguages: [String]) -> infoPlist {
      .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale))
    }
    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      let source: RswiftResources.StringResource.Source

      /// en translation: Wecyn
      ///
      /// Key: CFBundleDisplayName
      ///
      /// Locales: en, zh-Hans
      var cfBundleDisplayName: RswiftResources.StringResource { .init(key: "CFBundleDisplayName", tableName: "InfoPlist", source: source, developmentValue: "Wecyn", comment: nil) }
    }

    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 22 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: About Wecyn
      ///
      /// Key: About Wecyn
      ///
      /// Locales: en, zh-Hans
      var aboutWecyn: RswiftResources.StringResource { .init(key: "About Wecyn", tableName: "Localizable", source: source, developmentValue: "About Wecyn", comment: nil) }

      /// en translation: Account Manage
      ///
      /// Key: Account Manage
      ///
      /// Locales: en, zh-Hans
      var accountManage: RswiftResources.StringResource { .init(key: "Account Manage", tableName: "Localizable", source: source, developmentValue: "Account Manage", comment: nil) }

      /// en translation: Activity
      ///
      /// Key: Activity
      ///
      /// Locales: en, zh-Hans
      var activity: RswiftResources.StringResource { .init(key: "Activity", tableName: "Localizable", source: source, developmentValue: "Activity", comment: nil) }

      /// en translation: Color Remark
      ///
      /// Key: Color Remark
      ///
      /// Locales: en, zh-Hans
      var colorRemark: RswiftResources.StringResource { .init(key: "Color Remark", tableName: "Localizable", source: source, developmentValue: "Color Remark", comment: nil) }

      /// en translation: Contact us
      ///
      /// Key: Contact us
      ///
      /// Locales: en, zh-Hans
      var contactUs: RswiftResources.StringResource { .init(key: "Contact us", tableName: "Localizable", source: source, developmentValue: "Contact us", comment: nil) }

      /// en translation: Education
      ///
      /// Key: Education
      ///
      /// Locales: en, zh-Hans
      var education: RswiftResources.StringResource { .init(key: "Education", tableName: "Localizable", source: source, developmentValue: "Education", comment: nil) }

      /// en translation: Experience
      ///
      /// Key: Experience
      ///
      /// Locales: en, zh-Hans
      var experience: RswiftResources.StringResource { .init(key: "Experience", tableName: "Localizable", source: source, developmentValue: "Experience", comment: nil) }

      /// en translation: Interests
      ///
      /// Key: Interests
      ///
      /// Locales: en, zh-Hans
      var interests: RswiftResources.StringResource { .init(key: "Interests", tableName: "Localizable", source: source, developmentValue: "Interests", comment: nil) }

      /// en translation: Language
      ///
      /// Key: Language
      ///
      /// Locales: en, zh-Hans
      var language: RswiftResources.StringResource { .init(key: "Language", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: Logout
      ///
      /// Locales: en, zh-Hans
      var logout: RswiftResources.StringResource { .init(key: "Logout", tableName: "Localizable", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Notification
      ///
      /// Key: Notification
      ///
      /// Locales: en, zh-Hans
      var notification: RswiftResources.StringResource { .init(key: "Notification", tableName: "Localizable", source: source, developmentValue: "Notification", comment: nil) }

      /// en translation: Privacy Agreement
      ///
      /// Key: Privacy Agreement
      ///
      /// Locales: en, zh-Hans
      var privacyAgreement: RswiftResources.StringResource { .init(key: "Privacy Agreement", tableName: "Localizable", source: source, developmentValue: "Privacy Agreement", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: Settings
      ///
      /// Locales: en, zh-Hans
      var settings: RswiftResources.StringResource { .init(key: "Settings", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: Skills
      ///
      /// Key: Skills
      ///
      /// Locales: en, zh-Hans
      var skills: RswiftResources.StringResource { .init(key: "Skills", tableName: "Localizable", source: source, developmentValue: "Skills", comment: nil) }

      /// en translation: TimeZone
      ///
      /// Key: TimeZone
      ///
      /// Locales: en, zh-Hans
      var timeZone: RswiftResources.StringResource { .init(key: "TimeZone", tableName: "Localizable", source: source, developmentValue: "TimeZone", comment: nil) }

      /// en translation: Version
      ///
      /// Key: Version
      ///
      /// Locales: en, zh-Hans
      var version: RswiftResources.StringResource { .init(key: "Version", tableName: "Localizable", source: source, developmentValue: "Version", comment: nil) }

      /// en translation: Add new section
      ///
      /// Key: add_new_section
      ///
      /// Locales: en, zh-Hans
      var add_new_section: RswiftResources.StringResource { .init(key: "add_new_section", tableName: "Localizable", source: source, developmentValue: "Add new section", comment: nil) }

      /// en translation: Pull down to refresh
      ///
      /// Key: pull_down_to_refresh
      ///
      /// Locales: en, zh-Hans
      var pull_down_to_refresh: RswiftResources.StringResource { .init(key: "pull_down_to_refresh", tableName: "Localizable", source: source, developmentValue: "Pull down to refresh", comment: nil) }

      /// en translation: Pull up to load more
      ///
      /// Key: pull_up_to_refresh
      ///
      /// Locales: en, zh-Hans
      var pull_up_to_refresh: RswiftResources.StringResource { .init(key: "pull_up_to_refresh", tableName: "Localizable", source: source, developmentValue: "Pull up to load more", comment: nil) }

      /// en translation: Release to refresh
      ///
      /// Key: release_refresh
      ///
      /// Locales: en, zh-Hans
      var release_refresh: RswiftResources.StringResource { .init(key: "release_refresh", tableName: "Localizable", source: source, developmentValue: "Release to refresh", comment: nil) }

      /// en translation: View Calendar
      ///
      /// Key: view_calendar
      ///
      /// Locales: en, zh-Hans
      var view_calendar: RswiftResources.StringResource { .init(key: "view_calendar", tableName: "Localizable", source: source, developmentValue: "View Calendar", comment: nil) }

      /// en translation: View NameCard
      ///
      /// Key: view_namecard
      ///
      /// Locales: en, zh-Hans
      var view_namecard: RswiftResources.StringResource { .init(key: "view_namecard", tableName: "Localizable", source: source, developmentValue: "View NameCard", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 14 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `BackgroundColor`.
    var backgroundColor: RswiftResources.ColorResource { .init(name: "BackgroundColor", path: [], bundle: bundle) }

    /// Color `IconColor`.
    var iconColor: RswiftResources.ColorResource { .init(name: "IconColor", path: [], bundle: bundle) }

    /// Color `SeperatorColor`.
    var seperatorColor: RswiftResources.ColorResource { .init(name: "SeperatorColor", path: [], bundle: bundle) }

    /// Color `TextColor22`.
    var textColor22: RswiftResources.ColorResource { .init(name: "TextColor22", path: [], bundle: bundle) }

    /// Color `TextColor33`.
    var textColor33: RswiftResources.ColorResource { .init(name: "TextColor33", path: [], bundle: bundle) }

    /// Color `TextColor66`.
    var textColor66: RswiftResources.ColorResource { .init(name: "TextColor66", path: [], bundle: bundle) }

    /// Color `TextColor77`.
    var textColor77: RswiftResources.ColorResource { .init(name: "TextColor77", path: [], bundle: bundle) }

    /// Color `TextColor99`.
    var textColor99: RswiftResources.ColorResource { .init(name: "TextColor99", path: [], bundle: bundle) }

    /// Color `TheamColor`.
    var theamColor: RswiftResources.ColorResource { .init(name: "TheamColor", path: [], bundle: bundle) }

    /// Color `agreeColor`.
    var agreeColor: RswiftResources.ColorResource { .init(name: "agreeColor", path: [], bundle: bundle) }

    /// Color `disableColor`.
    var disableColor: RswiftResources.ColorResource { .init(name: "disableColor", path: [], bundle: bundle) }

    /// Color `rejectColor`.
    var rejectColor: RswiftResources.ColorResource { .init(name: "rejectColor", path: [], bundle: bundle) }

    /// Color `unknownColor`.
    var unknownColor: RswiftResources.ColorResource { .init(name: "unknownColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 121 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `alarm`.
    var alarm: RswiftResources.ImageResource { .init(name: "alarm", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `appicon`.
    var appicon: RswiftResources.ImageResource { .init(name: "appicon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `attendace_delete`.
    var attendace_delete: RswiftResources.ImageResource { .init(name: "attendace_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bell`.
    var bell: RswiftResources.ImageResource { .init(name: "bell", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar`.
    var calendar: RswiftResources.ImageResource { .init(name: "calendar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar.badge.plus`.
    var calendarBadgePlus: RswiftResources.ImageResource { .init(name: "calendar.badge.plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar.day.timeline.left`.
    var calendarDayTimelineLeft: RswiftResources.ImageResource { .init(name: "calendar.day.timeline.left", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_add`.
    var calendar_add: RswiftResources.ImageResource { .init(name: "calendar_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_calendar`.
    var calendar_calendar: RswiftResources.ImageResource { .init(name: "calendar_calendar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_filter`.
    var calendar_filter: RswiftResources.ImageResource { .init(name: "calendar_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_item_arrow_down`.
    var calendar_item_arrow_down: RswiftResources.ImageResource { .init(name: "calendar_item_arrow_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar_item_arrow_right`.
    var calendar_item_arrow_right: RswiftResources.ImageResource { .init(name: "calendar_item_arrow_right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera.circle.fill`.
    var cameraCircleFill: RswiftResources.ImageResource { .init(name: "camera.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkmark`.
    var checkmark: RswiftResources.ImageResource { .init(name: "checkmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkmark.circle`.
    var checkmarkCircle: RswiftResources.ImageResource { .init(name: "checkmark.circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkmark.seal.fill`.
    var checkmarkSealFill: RswiftResources.ImageResource { .init(name: "checkmark.seal.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkmark.seal.fill.gray`.
    var checkmarkSealFillGray: RswiftResources.ImageResource { .init(name: "checkmark.seal.fill.gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron.backward`.
    var chevronBackward: RswiftResources.ImageResource { .init(name: "chevron.backward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron.compact.down`.
    var chevronCompactDown: RswiftResources.ImageResource { .init(name: "chevron.compact.down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron.compact.up`.
    var chevronCompactUp: RswiftResources.ImageResource { .init(name: "chevron.compact.up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron.down`.
    var chevronDown: RswiftResources.ImageResource { .init(name: "chevron.down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron.right`.
    var chevronRight: RswiftResources.ImageResource { .init(name: "chevron.right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron.up`.
    var chevronUp: RswiftResources.ImageResource { .init(name: "chevron.up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `circle`.
    var circle: RswiftResources.ImageResource { .init(name: "circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `circle.fill`.
    var circleFill: RswiftResources.ImageResource { .init(name: "circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `clock`.
    var clock: RswiftResources.ImageResource { .init(name: "clock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `clock.arrow.circlepath`.
    var clockArrowCirclepath: RswiftResources.ImageResource { .init(name: "clock.arrow.circlepath", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `comment`.
    var comment: RswiftResources.ImageResource { .init(name: "comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `connection_delete`.
    var connection_delete: RswiftResources.ImageResource { .init(name: "connection_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `connection_message`.
    var connection_message: RswiftResources.ImageResource { .init(name: "connection_message", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `connection_search`.
    var connection_search: RswiftResources.ImageResource { .init(name: "connection_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `crop`.
    var crop: RswiftResources.ImageResource { .init(name: "crop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edu_placeholder`.
    var edu_placeholder: RswiftResources.ImageResource { .init(name: "edu_placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ellipsis`.
    var ellipsis: RswiftResources.ImageResource { .init(name: "ellipsis", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ellipsis.message`.
    var ellipsisMessage: RswiftResources.ImageResource { .init(name: "ellipsis.message", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `envelope.circle.fill`.
    var envelopeCircleFill: RswiftResources.ImageResource { .init(name: "envelope.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gear.circle.fill`.
    var gearCircleFill: RswiftResources.ImageResource { .init(name: "gear.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gearshape`.
    var gearshape: RswiftResources.ImageResource { .init(name: "gearshape", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google`.
    var google: RswiftResources.ImageResource { .init(name: "google", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart`.
    var heart: RswiftResources.ImageResource { .init(name: "heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heart.fill`.
    var heartFill: RswiftResources.ImageResource { .init(name: "heart.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `house`.
    var house: RswiftResources.ImageResource { .init(name: "house", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info.circle`.
    var infoCircle: RswiftResources.ImageResource { .init(name: "info.circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iphone.gen1.circle.fill`.
    var iphoneGen1CircleFill: RswiftResources.ImageResource { .init(name: "iphone.gen1.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `job_location`.
    var job_location: RswiftResources.ImageResource { .init(name: "job_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `job_mark`.
    var job_mark: RswiftResources.ImageResource { .init(name: "job_mark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `job_marked`.
    var job_marked: RswiftResources.ImageResource { .init(name: "job_marked", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `keyboard.chevron.compact.down`.
    var keyboardChevronCompactDown: RswiftResources.ImageResource { .init(name: "keyboard.chevron.compact.down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like`.
    var like: RswiftResources.ImageResource { .init(name: "like", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `line.3.horizontal`.
    var line3Horizontal: RswiftResources.ImageResource { .init(name: "line.3.horizontal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `link`.
    var link: RswiftResources.ImageResource { .init(name: "link", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location`.
    var location: RswiftResources.ImageResource { .init(name: "location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location.circle.fill`.
    var locationCircleFill: RswiftResources.ImageResource { .init(name: "location.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `magnifyingglass`.
    var magnifyingglass: RswiftResources.ImageResource { .init(name: "magnifyingglass", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `magnifyingglass.circle.fill`.
    var magnifyingglassCircleFill: RswiftResources.ImageResource { .init(name: "magnifyingglass.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mail.stack`.
    var mailStack: RswiftResources.ImageResource { .init(name: "mail.stack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mappin.and.ellipse`.
    var mappinAndEllipse: RswiftResources.ImageResource { .init(name: "mappin.and.ellipse", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `message`.
    var message: RswiftResources.ImageResource { .init(name: "message", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `namecard_background`.
    var namecard_background: RswiftResources.ImageResource { .init(name: "namecard_background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `org_placeholder`.
    var org_placeholder: RswiftResources.ImageResource { .init(name: "org_placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paintbrush.pointed`.
    var paintbrushPointed: RswiftResources.ImageResource { .init(name: "paintbrush.pointed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paperplane.fill`.
    var paperplaneFill: RswiftResources.ImageResource { .init(name: "paperplane.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `password_invisible`.
    var password_invisible: RswiftResources.ImageResource { .init(name: "password_invisible", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `password_visible`.
    var password_visible: RswiftResources.ImageResource { .init(name: "password_visible", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `path`.
    var path: RswiftResources.ImageResource { .init(name: "path", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pencil.line`.
    var pencilLine: RswiftResources.ImageResource { .init(name: "pencil.line", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.2`.
    var person2: RswiftResources.ImageResource { .init(name: "person.2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.badge.plus`.
    var personBadgePlus: RswiftResources.ImageResource { .init(name: "person.badge.plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.fill`.
    var personFill: RswiftResources.ImageResource { .init(name: "person.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.fill.checkmark`.
    var personFillCheckmark: RswiftResources.ImageResource { .init(name: "person.fill.checkmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.fill.questionmark`.
    var personFillQuestionmark: RswiftResources.ImageResource { .init(name: "person.fill.questionmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person.fill.xmark`.
    var personFillXmark: RswiftResources.ImageResource { .init(name: "person.fill.xmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phone.circle.fill`.
    var phoneCircleFill: RswiftResources.ImageResource { .init(name: "phone.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pin`.
    var pin: RswiftResources.ImageResource { .init(name: "pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play.circle.fill`.
    var playCircleFill: RswiftResources.ImageResource { .init(name: "play.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plus.circle`.
    var plusCircle: RswiftResources.ImageResource { .init(name: "plus.circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_comment`.
    var post_comment: RswiftResources.ImageResource { .init(name: "post_comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_comment_comment`.
    var post_comment_comment: RswiftResources.ImageResource { .init(name: "post_comment_comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_comment_expend`.
    var post_comment_expend: RswiftResources.ImageResource { .init(name: "post_comment_expend", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_comment_like`.
    var post_comment_like: RswiftResources.ImageResource { .init(name: "post_comment_like", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_comment_unlike`.
    var post_comment_unlike: RswiftResources.ImageResource { .init(name: "post_comment_unlike", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_picture_delete`.
    var post_picture_delete: RswiftResources.ImageResource { .init(name: "post_picture_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_repost`.
    var post_repost: RswiftResources.ImageResource { .init(name: "post_repost", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_share`.
    var post_share: RswiftResources.ImageResource { .init(name: "post_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `post_type_down`.
    var post_type_down: RswiftResources.ImageResource { .init(name: "post_type_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile_edit_userinfo`.
    var profile_edit_userinfo: RswiftResources.ImageResource { .init(name: "profile_edit_userinfo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `proile_user`.
    var proile_user: RswiftResources.ImageResource { .init(name: "proile_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `qrcode`.
    var qrcode: RswiftResources.ImageResource { .init(name: "qrcode", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `questionmark.circle.fill`.
    var questionmarkCircleFill: RswiftResources.ImageResource { .init(name: "questionmark.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rectangle.on.rectangle.circle.fill`.
    var rectangleOnRectangleCircleFill: RswiftResources.ImageResource { .init(name: "rectangle.on.rectangle.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `repeat`.
    var `repeat`: RswiftResources.ImageResource { .init(name: "repeat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `retweet`.
    var retweet: RswiftResources.ImageResource { .init(name: "retweet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search_icon`.
    var search_icon: RswiftResources.ImageResource { .init(name: "search_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send`.
    var send: RswiftResources.ImageResource { .init(name: "send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shared.with.you.slash`.
    var sharedWithYouSlash: RswiftResources.ImageResource { .init(name: "shared.with.you.slash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square.and.arrow.up`.
    var squareAndArrowUp: RswiftResources.ImageResource { .init(name: "square.and.arrow.up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square.and.arrow.up.circle.fill`.
    var squareAndArrowUpCircleFill: RswiftResources.ImageResource { .init(name: "square.and.arrow.up.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square.and.pencil`.
    var squareAndPencil: RswiftResources.ImageResource { .init(name: "square.and.pencil", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square.and.pencil.circle.fill`.
    var squareAndPencilCircleFill: RswiftResources.ImageResource { .init(name: "square.and.pencil.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square.fill.7`.
    var squareFill7: RswiftResources.ImageResource { .init(name: "square.fill.7", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switch.2`.
    var switch2: RswiftResources.ImageResource { .init(name: "switch.2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_admin`.
    var tab_admin: RswiftResources.ImageResource { .init(name: "tab_admin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_book`.
    var tab_book: RswiftResources.ImageResource { .init(name: "tab_book", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_calendar`.
    var tab_calendar: RswiftResources.ImageResource { .init(name: "tab_calendar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_home`.
    var tab_home: RswiftResources.ImageResource { .init(name: "tab_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_person`.
    var tab_person: RswiftResources.ImageResource { .init(name: "tab_person", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tag.fill`.
    var tagFill: RswiftResources.ImageResource { .init(name: "tag.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `text.quote`.
    var textQuote: RswiftResources.ImageResource { .init(name: "text.quote", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar_icon_at`.
    var toolbar_icon_at: RswiftResources.ImageResource { .init(name: "toolbar_icon_at", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar_icon_emoji`.
    var toolbar_icon_emoji: RswiftResources.ImageResource { .init(name: "toolbar_icon_emoji", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar_icon_hashtag`.
    var toolbar_icon_hashtag: RswiftResources.ImageResource { .init(name: "toolbar_icon_hashtag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar_icon_image`.
    var toolbar_icon_image: RswiftResources.ImageResource { .init(name: "toolbar_icon_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar_icon_more`.
    var toolbar_icon_more: RswiftResources.ImageResource { .init(name: "toolbar_icon_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar_link`.
    var toolbar_link: RswiftResources.ImageResource { .init(name: "toolbar_link", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trash.fill`.
    var trashFill: RswiftResources.ImageResource { .init(name: "trash.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `triangle.fill`.
    var triangleFill: RswiftResources.ImageResource { .init(name: "triangle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `video`.
    var video: RswiftResources.ImageResource { .init(name: "video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `viewfinder.circle.fill`.
    var viewfinderCircleFill: RswiftResources.ImageResource { .init(name: "viewfinder.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `xmark`.
    var xmark: RswiftResources.ImageResource { .init(name: "xmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `xmark.circle.fill`.
    var xmarkCircleFill: RswiftResources.ImageResource { .init(name: "xmark.circle.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    let comAppleDeveloperAssociatedDomains = comAppleDeveloperAssociatedDomains()
    let comAppleDeveloperNfcReadersessionFormats = comAppleDeveloperNfcReadersessionFormats()
    let comAppleSecurityApplicationGroups = comAppleSecurityApplicationGroups()
    struct comAppleDeveloperAssociatedDomains {
      let applinksWwwTerrabyteSg: String = "applinks:www.terrabyte.sg"
    }
    struct comAppleDeveloperNfcReadersessionFormats {
      let taG: String = "TAG"
    }
    struct comAppleSecurityApplicationGroups {
      let groupWidgetCalendar: String = "group.widget.calendar"
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 5 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `OIMUIEmoji.bundle`.
    var oimuiEmojiBundle: RswiftResources.FileResource { .init(name: "OIMUIEmoji", pathExtension: "bundle", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `OIMUIResource.bundle`.
    var oimuiResourceBundle: RswiftResources.FileResource { .init(name: "OIMUIResource", pathExtension: "bundle", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `bundle.js`.
    var bundleJs: RswiftResources.FileResource { .init(name: "bundle", pathExtension: "js", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `nlp.js`.
    var nlpJs: RswiftResources.FileResource { .init(name: "nlp", pathExtension: "js", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `rrule.js`.
    var rruleJs: RswiftResources.FileResource { .init(name: "rrule", pathExtension: "js", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 34 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AddUserEducationExperienceView`.
    var addUserEducationExperienceView: RswiftResources.NibReference<AddUserEducationExperienceView> { .init(name: "AddUserEducationExperienceView", bundle: bundle) }

    /// Nib `AddUserWorkExperienceView`.
    var addUserWorkExperienceView: RswiftResources.NibReference<AddUserWorkExperienceView> { .init(name: "AddUserWorkExperienceView", bundle: bundle) }

    /// Nib `AdminAddDomainContainer`.
    var adminAddDomainContainer: RswiftResources.NibReference<AdminAddDomainContainer> { .init(name: "AdminAddDomainContainer", bundle: bundle) }

    /// Nib `AdminAddRoleContainer`.
    var adminAddRoleContainer: RswiftResources.NibReference<AdminAddRoleContainer> { .init(name: "AdminAddRoleContainer", bundle: bundle) }

    /// Nib `AdminAddRoomContainer`.
    var adminAddRoomContainer: RswiftResources.NibReference<AdminAddRoomContainer> { .init(name: "AdminAddRoomContainer", bundle: bundle) }

    /// Nib `AdminDepartmentDetailContainer`.
    var adminDepartmentDetailContainer: RswiftResources.NibReference<AdminDepartmentDetailContainer> { .init(name: "AdminDepartmentDetailContainer", bundle: bundle) }

    /// Nib `AdminEditStaffContainer`.
    var adminEditStaffContainer: RswiftResources.NibReference<AdminEditStaffContainer> { .init(name: "AdminEditStaffContainer", bundle: bundle) }

    /// Nib `AdminEditStaffExpContainer`.
    var adminEditStaffExpContainer: RswiftResources.NibReference<AdminEditStaffExpContainer> { .init(name: "AdminEditStaffExpContainer", bundle: bundle) }

    /// Nib `AdminNewStaffCell`.
    var adminNewStaffCell: RswiftResources.NibReference<AdminNewStaffCell> { .init(name: "AdminNewStaffCell", bundle: bundle) }

    /// Nib `AdminRoleItemCell`.
    var adminRoleItemCell: RswiftResources.NibReference<AdminRoleItemCell> { .init(name: "AdminRoleItemCell", bundle: bundle) }

    /// Nib `AdminRoomCell`.
    var adminRoomCell: RswiftResources.NibReference<AdminRoomCell> { .init(name: "AdminRoomCell", bundle: bundle) }

    /// Nib `AdminStaffExpsCell`.
    var adminStaffExpsCell: RswiftResources.NibReference<AdminStaffExpsCell> { .init(name: "AdminStaffExpsCell", bundle: bundle) }

    /// Nib `AdminStaffItemCell`.
    var adminStaffItemCell: RswiftResources.NibReference<AdminStaffItemCell> { .init(name: "AdminStaffItemCell", bundle: bundle) }

    /// Nib `CaledarItemCell`.
    var caledarItemCell: RswiftResources.NibReference<CaledarItemCell> { .init(name: "CaledarItemCell", bundle: bundle) }

    /// Nib `ChatListCell`.
    var chatListCell: RswiftResources.NibReference<ChatListCell> { .init(name: "ChatListCell", bundle: bundle) }

    /// Nib `ConnectAuditItemCell`.
    var connectAuditItemCell: RswiftResources.NibReference<ConnectAuditItemCell> { .init(name: "ConnectAuditItemCell", bundle: bundle) }

    /// Nib `ConnectionItemCell`.
    var connectionItemCell: RswiftResources.NibReference<ConnectionItemCell> { .init(name: "ConnectionItemCell", bundle: bundle) }

    /// Nib `CreateGroupHeaderView`.
    var createGroupHeaderView: RswiftResources.NibReference<CreateGroupHeaderView> { .init(name: "CreateGroupHeaderView", bundle: bundle) }

    /// Nib `CreatePostToolBar`.
    var createPostToolBar: RswiftResources.NibReference<CreatePostToolBar> { .init(name: "CreatePostToolBar", bundle: bundle) }

    /// Nib `ForgetPwdContainer`.
    var forgetPwdContainer: RswiftResources.NibReference<ForgetPwdContainer> { .init(name: "ForgetPwdContainer", bundle: bundle) }

    /// Nib `HomeHeaderJobItemCell`.
    var homeHeaderJobItemCell: RswiftResources.NibReference<HomeHeaderJobItemCell> { .init(name: "HomeHeaderJobItemCell", bundle: bundle) }

    /// Nib `HomeHeaderView`.
    var homeHeaderView: RswiftResources.NibReference<HomeHeaderView> { .init(name: "HomeHeaderView", bundle: bundle) }

    /// Nib `InputCodeContainer`.
    var inputCodeContainer: RswiftResources.NibReference<InputCodeContainer> { .init(name: "InputCodeContainer", bundle: bundle) }

    /// Nib `JobItemCell`.
    var jobItemCell: RswiftResources.NibReference<JobItemCell> { .init(name: "JobItemCell", bundle: bundle) }

    /// Nib `LoginView`.
    var loginView: RswiftResources.NibReference<LoginView> { .init(name: "LoginView", bundle: bundle) }

    /// Nib `NotificationCell`.
    var notificationCell: RswiftResources.NibReference<NotificationCell> { .init(name: "NotificationCell", bundle: bundle) }

    /// Nib `PostCommentCell`.
    var postCommentCell: RswiftResources.NibReference<PostCommentCell> { .init(name: "PostCommentCell", bundle: bundle) }

    /// Nib `PostDetailCommentFooterView`.
    var postDetailCommentFooterView: RswiftResources.NibReference<PostDetailCommentFooterView> { .init(name: "PostDetailCommentFooterView", bundle: bundle) }

    /// Nib `ProfileHeaderView`.
    var profileHeaderView: RswiftResources.NibReference<ProfileHeaderView> { .init(name: "ProfileHeaderView", bundle: bundle) }

    /// Nib `RegistAddAvatarView`.
    var registAddAvatarView: RswiftResources.NibReference<RegistAddAvatarView> { .init(name: "RegistAddAvatarView", bundle: bundle) }

    /// Nib `RegistConfirmView`.
    var registConfirmView: RswiftResources.NibReference<RegistConfirmView> { .init(name: "RegistConfirmView", bundle: bundle) }

    /// Nib `RegistInfoView`.
    var registInfoView: RswiftResources.NibReference<RegistInfoView> { .init(name: "RegistInfoView", bundle: bundle) }

    /// Nib `RegistProfileView`.
    var registProfileView: RswiftResources.NibReference<RegistProfileView> { .init(name: "RegistProfileView", bundle: bundle) }

    /// Nib `ResetPwdContainer`.
    var resetPwdContainer: RswiftResources.NibReference<ResetPwdContainer> { .init(name: "ResetPwdContainer", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "chevron.right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chevron.right' is used in nib 'AddUserEducationExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'AddUserEducationExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AddUserEducationExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor99", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor99' is used in nib 'AddUserEducationExperienceView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chevron.right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chevron.right' is used in nib 'AddUserWorkExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'AddUserWorkExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AddUserWorkExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor99", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor99' is used in nib 'AddUserWorkExperienceView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminAddDomainContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminAddDomainContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'AdminAddDomainContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminAddRoleContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'AdminAddRoleContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminAddRoleContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'AdminAddRoleContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminAddRoomContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminAddRoomContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'AdminAddRoomContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminDepartmentDetailContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminDepartmentDetailContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'AdminDepartmentDetailContainer', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chevron.right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chevron.right' is used in nib 'AdminEditStaffContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminEditStaffContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminEditStaffContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'AdminEditStaffContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminEditStaffExpContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminEditStaffExpContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'AdminEditStaffExpContainer', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ellipsis", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ellipsis' is used in nib 'AdminNewStaffCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminNewStaffCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminNewStaffCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor77", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor77' is used in nib 'AdminNewStaffCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ellipsis", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ellipsis' is used in nib 'AdminRoleItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "IconColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconColor' is used in nib 'AdminRoleItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminRoleItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ellipsis", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ellipsis' is used in nib 'AdminRoomCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "IconColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconColor' is used in nib 'AdminRoomCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminRoomCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ellipsis", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ellipsis' is used in nib 'AdminStaffExpsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminStaffExpsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor77", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor77' is used in nib 'AdminStaffExpsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ellipsis", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ellipsis' is used in nib 'AdminStaffItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'AdminStaffItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor33", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor33' is used in nib 'AdminStaffItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor77", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor77' is used in nib 'AdminStaffItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "person.fill.checkmark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'person.fill.checkmark' is used in nib 'CaledarItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "repeat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'repeat' is used in nib 'CaledarItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'CaledarItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor74", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor74' is used in nib 'CaledarItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chat_status_muted_icon.png", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_status_muted_icon.png' is used in nib 'ChatListCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'ConnectAuditItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "proile_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'proile_user' is used in nib 'ConnectionItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'ConnectionItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'ConnectionItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "plus.circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'plus.circle' is used in nib 'CreateGroupHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'CreateGroupHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'CreateGroupHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor74", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor74' is used in nib 'CreateGroupHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'CreateGroupHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "paperplane.fill", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'paperplane.fill' is used in nib 'CreatePostToolBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "toolbar_icon_hashtag", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'toolbar_icon_hashtag' is used in nib 'CreatePostToolBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "toolbar_icon_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'toolbar_icon_image' is used in nib 'CreatePostToolBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "toolbar_link", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'toolbar_link' is used in nib 'CreatePostToolBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'video' is used in nib 'CreatePostToolBar', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'ForgetPwdContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'ForgetPwdContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor22", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor22' is used in nib 'ForgetPwdContainer', but couldn't be loaded.") }
      if UIKit.UIImage(named: "job_mark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'job_mark' is used in nib 'HomeHeaderJobItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'placeholder' is used in nib 'HomeHeaderJobItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'HomeHeaderJobItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "search_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search_icon' is used in nib 'HomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor162C46", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor162C46' is used in nib 'HomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'HomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'HomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'InputCodeContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'InputCodeContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor22", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor22' is used in nib 'InputCodeContainer', but couldn't be loaded.") }
      if UIKit.UIImage(named: "job_location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'job_location' is used in nib 'JobItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "job_mark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'job_mark' is used in nib 'JobItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'placeholder' is used in nib 'JobItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'JobItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'JobItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "google", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'google' is used in nib 'LoginView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "password_invisible", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'password_invisible' is used in nib 'LoginView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "password_visible", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'password_visible' is used in nib 'LoginView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'LoginView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'NotificationCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor22", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor22' is used in nib 'NotificationCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor77", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor77' is used in nib 'NotificationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_comment_comment", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_comment_comment' is used in nib 'PostCommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "post_comment_unlike", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'post_comment_unlike' is used in nib 'PostCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "IconColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconColor' is used in nib 'PostCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor52", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor52' is used in nib 'PostCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "placeholderColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'placeholderColor' is used in nib 'PostCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundColor' is used in nib 'PostDetailCommentFooterView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'PostDetailCommentFooterView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor162C46", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor162C46' is used in nib 'PostDetailCommentFooterView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor74", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor74' is used in nib 'PostDetailCommentFooterView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "proile_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'proile_user' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "proile_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'proile_user' is used in nib 'RegistAddAvatarView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'RegistAddAvatarView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'RegistConfirmView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'RegistInfoView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in nib 'RegistProfileView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'ResetPwdContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "SeperatorColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SeperatorColor' is used in nib 'ResetPwdContainer', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor22", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor22' is used in nib 'ResetPwdContainer', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var attachmentDetailsViewController: attachmentDetailsViewController { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func attachmentDetailsViewController(bundle: Foundation.Bundle) -> attachmentDetailsViewController {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.attachmentDetailsViewController.validate()
      try self.launchScreen.validate()
    }


    /// Storyboard `AttachmentDetailsViewController`.
    struct attachmentDetailsViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AttachmentDetailsViewController"

      var attachmentDetailsViewController: RswiftResources.StoryboardViewControllerIdentifier<AttachmentDetailsViewController> { .init(identifier: "AttachmentDetailsViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if attachmentDetailsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'attachmentDetailsViewController' could not be loaded from storyboard 'AttachmentDetailsViewController' as 'AttachmentDetailsViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIColor(named: "TheamColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TheamColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}